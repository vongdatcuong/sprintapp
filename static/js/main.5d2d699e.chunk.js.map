{"version":3,"sources":["layouts/App/logo.svg","layouts/Header/index.js","layouts/Footer/Copyright.js","layouts/Footer/index.js","Utils/index.js","components/DashBoard/index.js","layouts/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","logo","fontSize","fontFamily","fontWeight","icon","marginRight","spacing","position","right","Header","classes","AppBar","className","Toolbar","Typography","variant","color","noWrap","Copyright","align","Link","href","Date","getFullYear","footer","backgroundColor","palette","background","paper","padding","width","bottom","Footer","gutterBottom","component","addIcon","height","margin","cardGrid","paddingTop","paddingBottom","maxWidth","addCard","display","flexDirection","textAlign","border","boxShadow","cursor","card","cardContent","flexGrow","margon","action","justifyContent","actionBtn","actionIcons","info","left","monthStrs","DashBoard","useState","boards","setBoards","useEffect","fetch","API","then","res","json","result","forEach","board","index","createdDate","error","Container","style","Grid","container","item","xs","sm","md","Card","CardContent","map","key","boardID","name","getDate","getMonth","numOfCard","CardActions","Button","size","App","Fragment","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5d2d699e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Header.css';\n// Material UI Core\nimport AppBar from '@material-ui/core/AppBar';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n  logo: {\n    fontSize: '30px',\n    fontFamily: 'ThirstyScript',\n    fontWeight: 'bold'\n  },\n  icon: {\n    marginRight: theme.spacing(2),\n    fontFamily: 'ThirstyScript',\n    fontSize: '40px',\n    position: 'absolute',\n    right: '3px'\n  }\n}));\n\nfunction Header() {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"relative\" className=\"main-bg-blue\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.logo} color=\"inherit\" noWrap>\n            Sprint Retro\n          </Typography>\n          <AccountCircleIcon className={classes.icon}  />\n        </Toolbar>\n      </AppBar>\n  );\n}\n\nexport default Header;\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nfunction Copyright() {\r\n    return (\r\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        {'Copyright Â© '}\r\n        <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n          Your Website\r\n        </Link>{' '}\r\n        {new Date().getFullYear()}\r\n        {'.'}\r\n      </Typography>\r\n    );\r\n}\r\n\r\nexport default Copyright;","import React from 'react';\n// Material UI Core\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Components\nimport Copyright from './Copyright';\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n    position: 'absolute',\n    width: '100%',\n    bottom: 0\n  },\n}));\n\nfunction Footer() {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Sprint App\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Make your own Agile/Scrum\n        </Typography>\n        <Copyright />\n    </footer>\n  );\n}\n\n\nexport default Footer;\n","const api = 'https://shrouded-bastion-84248.herokuapp.com';\r\nconst boardPath = '/board';\r\nconst allBoardPath = '/boards';\r\n\r\nexport default {\r\n    api,\r\n    boardPath,\r\n    allBoardPath\r\n}","import React, {useState, useEffect} from 'react';\nimport './DashBoard.css';\nimport API from '../../Utils';\n// Material UI Core\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, rgbToHex } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\n// Material Icons\nimport LinkIcon from '@material-ui/icons/Link';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\n\n// Components\n\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  addIcon: {\n    width: '25%',\n    height: '25%',\n    color: '#8e24aa',\n    margin: '0'\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n    maxWidth: '1400px'\n  },\n  addCard: {\n    height: '80%',\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'center',\n    border: '2px dashed #ccc',\n    boxShadow: 'none',\n    backgroundColor: 'transparent',\n    cursor: 'pointer',\n    '&:hover': {\n      border: '2px dashed #8e24aa',\n    }\n  },\n  card: {\n    height: '80%',\n    display: 'flex',\n    flexDirection: 'column',\n    cursor: 'pointer',\n    '&:hover': {\n      boxShadow: '0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12)'\n    }\n  },\n  cardContent: {\n    flexGrow: 1,\n    margon: '3px'\n  },\n  action: {\n    justifyContent: 'center',\n  },\n  actionBtn: {\n    width: '100%'\n  },\n  actionIcons: {\n    fontSize: '15px',\n    marginRight: '5px'\n  },\n  info: {\n    color: '#888888',\n    fontSize: '13px',\n    position: 'relative',\n    '& div.info-time': {\n      position: 'absolute',\n      left: '7px'\n    },\n    '& div.info-numOfCard': {\n      position: 'absolute',\n      right: '7px'\n    }\n  }\n}));\n\nconst monthStrs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', \"Aug\", 'Sep', 'Oct', 'Nov', 'Dec'];\n\nfunction DashBoard() {\n  const classes = useStyles();\n  const [boards, setBoards] = useState([]);\n  useEffect(() => {\n    fetch(API.api + API.allBoardPath)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          result.forEach((board, index) => {\n            board.createdDate = new Date(board.createdDate);\n          })\n          setBoards(result);\n        },\n        (error) => {\n          \n        }\n    )\n  })\n\n  return (\n    <main>\n      <Container className={classes.cardGrid} maxWidth=\"md\">\n        <Typography gutterBottom variant=\"h4\" component=\"h2\" className=\"title-blue\" style={{fontWeight: '500'}}>\n          My Boards\n        </Typography>            \n        <Grid container spacing={4}>\n          <Grid item xs={8} sm={4} md={3}>\n              <Card className={classes.addCard}>\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                    <AddCircleIcon className={classes.addIcon}/>\n                  </Typography>\n                  <Typography gutterBottom variant=\"h6\" component=\"h2\" className=\"title-blue\">\n                    Add\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          {boards.map((board) => (\n            <Grid item key={board.boardID} xs={8} sm={4} md={3}>\n              <Card className={classes.card}>\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                    {board.name}\n                  </Typography>\n                  <div className={classes.info}>\n                    <div className=\"info-time\">\n                        <span><ScheduleIcon className={classes.actionIcons}/>\n                          {board.createdDate.getDate()}  &nbsp;\n                          {monthStrs[board.createdDate.getMonth()]}\n                        </span>\n                    </div>\n                    <div className=\"info-numOfCard\">\n                      <span>{board.numOfCard} Cards</span> \n                    </div>\n                  </div>\n                </CardContent>\n                <CardActions className={classes.action}>\n                  <Button size=\"small\" color=\"primary\" className={classes.actionBtn}>\n                    <LinkIcon className={classes.actionIcons}/>\n                    URL\n                  </Button>\n                  <Button size=\"small\" color=\"primary\" className={classes.actionBtn}>\n                    <FileCopyIcon className={classes.actionIcons}/>\n                    CLONE\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    </main>\n  );\n}\n\nexport default DashBoard;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// Material UI Core\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// Components\nimport Header from '../Header';\nimport Footer from '../Footer';\nimport DashBoard from '../../components/DashBoard';\n\nfunction App() {\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      {/* Header */}\n      <Header/>\n      {/* End Header */}\n      <DashBoard/>\n      {/* Footer */}\n      <Footer/>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './layouts/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}