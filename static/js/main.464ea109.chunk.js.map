{"version":3,"sources":["Utils/index.js","services/auth.service.js","layouts/Header/index.js","layouts/Footer/Copyright.js","layouts/Footer/index.js","services/auth-header.js","components/DashBoard/AddBoardDialog.js","dialogs/ConfirmDialog/index.js","components/DashBoard/index.js","components/LogIn/index.js","components/SignUp/index.js","components/Profile/index.js","components/Board/index.js","components/ShareBoard/index.js","layouts/Loading/index.js","layouts/App/index.js","serviceWorker.js","index.js"],"names":["api","boardPath","allBoardPath","myBoardPath","addBoard","deleteBoard","updateBoardName","cardPath","deleteCard","addCard","updateCard","userPath","logInPath","signUpPath","updateProfilePath","queryParams","params","Object","keys","map","k","encodeURIComponent","join","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","constant","then","response","json","result","isSuccess","localStorage","setItem","user","message","removeItem","name","email","parse","getItem","newUser","assign","useStyles","makeStyles","theme","logo","fontSize","fontFamily","fontWeight","color","textDecoration","icon","marginRight","spacing","cursor","rightNavBar","position","right","display","justifyContent","navBarHeading","paper","link","Header","classes","history","useHistory","AuthService","getCurrentUser","navHeadings","React","useState","anchorEl","setAnchorEl","handleClose","push","Typography","variant","noWrap","className","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","Link","href","logOut","AppBar","Toolbar","Copyright","align","Date","getFullYear","root","flexDirection","minHeight","main","marginTop","marginBottom","footer","padding","backgroundColor","palette","type","grey","StickyFooter","Container","maxWidth","authHeader","token","Authorization","title","textAlign","content","minWidth","action","button","margin","AddBoardDialog","props","setName","errorMsg","setErrMsg","setOpen","Dialog","aria-labelledby","DialogTitle","component","DialogContent","TextField","autoFocus","label","fullWidth","error","helperText","onChange","evt","target","value","handleNameChange","FormHelperText","formMessage","DialogActions","Button","setIsLoading","board","handleOK","a","DialogContentText","children","addIcon","width","height","cardGrid","paddingTop","paddingBottom","border","boxShadow","card","cardContent","flexGrow","actionBtn","actionIcons","verticalAlign","info","left","monthStrs","DashBoard","boards","setBoards","openAdd","setOpenAdd","openDel","setOpenDel","delBoard","setDelBoard","useEffect","res","forEach","index","createdDate","newBoards","slice","boardID","newBoards2","filter","idx","handleDeleteBoard","gutterBottom","style","Grid","container","item","xs","sm","md","Card","CardContent","key","getDate","getMonth","numOfCard","CardActions","size","navigator","clipboard","writeText","window","location","origin","userID","alert","openDeleteDialog","alignItems","avatar","secondary","form","submit","LogIn","setUsername","setPassword","CssBaseline","Avatar","onSubmit","preventDefault","logIn","handleLogIn","required","autoComplete","handleUsernameChange","handlePasswordChange","FormControlLabel","control","Checkbox","formMessageSuccess","formMessageFail","SignUp","repassword","setRePassword","setEmail","setIsSuccess","signUp","handleSignUp","handleRePasswordChange","handleEmailChange","justify","formControl","updateIcon","marginLeft","disabled","setDisabled","nameRef","useRef","gender","setGender","setTimeout","current","focus","toggleUpdate","updateCurrentUser","handleUpdate","inputRef","InputProps","FormControl","FormLabel","RadioGroup","row","aria-label","Radio","addBox","paddingLeft","paddingRight","deleteCardIcon","top","updateCardIcon","saveIcon","addCardTextField","saveCardIcon","Board","useParams","columns","setBoard","newBoardName","setNewBoardName","isEditingBName","setIsEditingBName","delCard","setDelCard","colAddCards","setColAddCards","colUpdateCards","setColUpdateCards","colObjs","colObjs2","col","columnID","toggleEnableEditing","bgcolor","boardNameUI","Fragment","handleNewBoardNameChange","startIcon","newBoard","handleUpdateBoardName","cardID","cards","index2","handleDeleteCard","Box","numOfCol","p","columnName","colID","handleColAddCard","newCard","borderColor","multiline","rowsMax","disableUnderline","handleAddNewCardChange","splice","handleAddNewCard","handleUpdateCardChange","handleUpdateCard","oldContent","handleColUpdateCard","ShareBoard","override","zIndex","Loading","loading","css","App","isLoading","path","to","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.464ea109.chunk.js","sourcesContent":["const api = 'https://shrouded-bastion-84248.herokuapp.com';\r\n//const api = 'http://localhost:8080';\r\n\r\n// Board\r\nconst boardPath = '/board';\r\nconst allBoardPath = '/boards';\r\nconst myBoardPath = '/myBoard';\r\nconst addBoard = '/add';\r\nconst deleteBoard = '/delete'\r\nconst updateBoardName = '/updateName'\r\n\r\n// Card\r\nconst cardPath = '/cards';\r\nconst deleteCard = '/delete';\r\nconst addCard = '/add';\r\nconst updateCard = '/update';\r\n\r\n// User\r\nconst userPath = '/user';\r\nconst logInPath = '/logIn';\r\nconst signUpPath = '/signUp';\r\nconst updateProfilePath = '/updateProfile';\r\n\r\nfunction queryParams(params) {\r\n    return Object.keys(params)\r\n        .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))\r\n        .join('&');\r\n}\r\n\r\nexport default {\r\n    api,\r\n    // Board\r\n    boardPath,\r\n    allBoardPath,\r\n    myBoardPath,\r\n    addBoard,\r\n    deleteBoard,\r\n    updateBoardName,\r\n    //Card\r\n    cardPath,\r\n    deleteCard,\r\n    addCard,\r\n    updateCard,\r\n    // User\r\n    userPath,\r\n    logInPath,\r\n    signUpPath,\r\n    updateProfilePath,\r\n    // \r\n    queryParams\r\n}","import constant from '../Utils';\r\n\r\nclass AuthService {\r\n    logIn(username, password) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ \r\n                username: username,\r\n                password: password\r\n            })\r\n        };\r\n        return fetch(constant.api + constant.userPath + constant.logInPath, requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                if (result.isSuccess){\r\n                    localStorage.setItem(\"user\", JSON.stringify(result.user));\r\n                    return {\r\n                        isSuccess: true,\r\n                        user: result.user\r\n                    };\r\n                } else {\r\n                    return {\r\n                        isSuccess: false,\r\n                        message: result.message\r\n                    }\r\n                }\r\n                \r\n            })\r\n    }\r\n\r\n    logOut(){\r\n        localStorage.removeItem(\"user\");\r\n    }\r\n\r\n    signUp(username, password, name, email) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ \r\n                username: username,\r\n                password: password,\r\n                name: name,\r\n                email: email\r\n            })\r\n        };\r\n        return fetch(constant.api + constant.userPath + constant.signUpPath, requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                return {\r\n                    isSuccess: result.isSuccess,\r\n                    message: result.message\r\n                };\r\n                \r\n            })\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return JSON.parse(localStorage.getItem('user'));\r\n    }\r\n\r\n    updateCurrentUser(newUser){\r\n        const user = Object.assign({}, JSON.parse(localStorage.getItem('user')), newUser);\r\n        localStorage.removeItem(\"user\");\r\n        localStorage.setItem(\"user\", JSON.stringify(user));\r\n    }\r\n  }\r\n  \r\n  export default new AuthService();","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport './Header.css';\n// Material UI Core\nimport AppBar from '@material-ui/core/AppBar';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Link from '@material-ui/core/Link';\n\n// Constant && Services\nimport AuthService from '../../services/auth.service';\n\nconst useStyles = makeStyles((theme) => ({\n  logo: {\n    fontSize: '30px',\n    fontFamily: 'ThirstyScript',\n    fontWeight: 'bold',\n    color: '#ffffff',\n    '&:hover': {\n      textDecoration: 'none'\n    }\n  },\n  icon: {\n    marginRight: theme.spacing(2),\n    fontFamily: 'ThirstyScript',\n    fontSize: '40px',\n    cursor: 'pointer',\n  },\n  rightNavBar: {\n    position: 'absolute',\n    right: '3px',\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  navBarHeading: {\n    fontFamily: 'Calibri',\n    fontSize: '1.9em',\n    marginRight: '20px',\n    fontWeight: 'bold',\n    cursor: 'pointer',\n    '&:hover': {\n      color: '#555555'\n    }\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  link: {\n    color: '#555555',\n    '&:hover': {\n      textDecoration: 'none'\n    }\n  }\n}));\n\nfunction Header() {\n  const classes = useStyles();\n  const history = useHistory();\n  const user = AuthService.getCurrentUser();\n  const navHeadings = [];\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  function handleLogOut(){\n    AuthService.logOut();\n    handleClose();\n    history.push('/logIn');\n  }\n\n  if (user){\n    navHeadings.push(<Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.navBarHeading}>\n                      Hello, {user.name} !!!\n                    </Typography>)\n    navHeadings.push(<div>\n                    <AccountCircleIcon \n                      aria-controls=\"simple-menu\"\n                      aria-haspopup=\"true\"\n                      onClick={handleClick}\n                      className={classes.icon}  />\n                    <Menu\n                      id=\"simple-menu\"\n                      anchorEl={anchorEl}\n                      keepMounted\n                      open={Boolean(anchorEl)}\n                      onClose={handleClose}\n                    >\n                      <MenuItem onClick={handleClose}>\n                        <Link href=\"/profile\" className={classes.link}>\n                          Profile\n                        </Link>\n                      </MenuItem>\n                      <MenuItem onClick={handleLogOut}>Logout</MenuItem>\n                    </Menu>\n                  </div>);\n  }\n\n  return (\n    <AppBar position=\"relative\" className=\"main-bg-blue\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            <Link href=\"/dashboard\" className={classes.logo}>\n              Sprint Retro\n            </Link>\n          </Typography>\n          <div className={classes.rightNavBar}>\n            {navHeadings}\n            \n          </div>\n        </Toolbar>\n      </AppBar>\n  );\n}\n\nexport default Header;\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nfunction Copyright() {\r\n    return (\r\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        {'Copyright © '}\r\n        <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n          Your Website\r\n        </Link>{' '}\r\n        {new Date().getFullYear()}\r\n        {'.'}\r\n      </Typography>\r\n    );\r\n}\r\n\r\nexport default Copyright;","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport Copyright from './Copyright.js';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh',\n  },\n  main: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: 'auto',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\n  },\n}));\n\nexport default function StickyFooter() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <footer className={classes.footer}>\n        <Container maxWidth=\"sm\">\n          <Typography variant=\"body1\"  align=\"center\">Build your Agile/Scrum.</Typography>\n          <Copyright />\n        </Container>\n      </footer>\n    </div>\n  );\n}\n","export default function authHeader() {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n  \r\n    if (user && user.token) {\r\n      // for Node.js Express back-end\r\n      return { Authorization: 'Bearer ' + user.token };\r\n    } else {\r\n      return {};\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n// Service\r\nimport authHeader from '../../services/auth-header.js';\r\nimport AuthService from '../../services/auth.service';\r\nimport constant from '../../Utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        fontSize: '1.5em',\r\n        fontWeight: 'bold',\r\n        textAlign: 'center'\r\n    },\r\n    content: {\r\n        minWidth: '350px'\r\n    },\r\n    action: {\r\n        justifyContent: 'center'\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))\r\n\r\nexport default function AddBoardDialog(props) {\r\n  const classes = useStyles();\r\n  const [name, setName] = useState('');\r\n  const [errorMsg, setErrMsg] = useState('');\r\n\r\n  const handleAddBoard = () => {\r\n    const user = AuthService.getCurrentUser();\r\n    if (!name || !user){\r\n        return;\r\n    }\r\n    props.setIsLoading(true);\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: Object.assign({\r\n            'Content-Type': 'application/json'   \r\n        }, authHeader()),\r\n        body: JSON.stringify({\r\n            name: name\r\n        })\r\n    };\r\n    return fetch(constant.api + constant.allBoardPath + constant.addBoard, requestOptions)\r\n        .then(response => response.json())\r\n        .then(result => {\r\n            if (result.isSuccess){\r\n                props.addBoard(result.board);\r\n                props.setOpen(false);\r\n            } else {\r\n                setErrMsg(result.message);\r\n            }\r\n            props.setIsLoading(false);\r\n    }, (error) => {\r\n        if (error) {\r\n          props.setIsLoading(false);\r\n        }\r\n      })\r\n  };\r\n\r\n  const handleClose = () => {\r\n    props.setOpen(false);\r\n  };\r\n\r\n  const handleNameChange = (evt) => {\r\n    setName(evt.target.value);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle className={classes.title} component='h1' id=\"form-dialog-title\">Create Board</DialogTitle>\r\n        <DialogContent className={classes.content}>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Board Name\"\r\n            type=\"text\"\r\n            fullWidth\r\n            error={name === \"\"}\r\n            helperText={name === \"\" ? 'Enter board name' : ' '}\r\n            onChange={(evt) => handleNameChange(evt)}\r\n          />\r\n          <FormHelperText className={classes.formMessage} error={true}>\r\n              {errorMsg}\r\n          </FormHelperText>\r\n        </DialogContent>\r\n        <DialogActions className={classes.action}>\r\n          <Button onClick={handleAddBoard} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n            Create\r\n          </Button>\r\n          <Button onClick={handleClose} variant=\"contained\" color=\"secondary\" className={classes.button}>\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n// Service\r\nimport constant from '../../Utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        fontSize: '1.5em',\r\n        fontWeight: 'bold',\r\n        textAlign: 'center'\r\n    },\r\n    content: {\r\n        minWidth: '350px',\r\n        textAlign: 'center'\r\n    },\r\n    action: {\r\n        justifyContent: 'center'\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))\r\n\r\nexport default function AddBoardDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const handleOK = async () => {\r\n    await props.action();\r\n    props.setOpen(false);\r\n  };\r\n  const handleClose = () => {\r\n    props.setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle className={classes.title} component='h1' id=\"form-dialog-title\">Confirmation</DialogTitle>\r\n        <DialogContent className={classes.content}>\r\n            <DialogContentText>\r\n                {props.children}\r\n            </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions className={classes.action}>\r\n          <Button onClick={handleOK} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n            OK\r\n          </Button>\r\n          <Button onClick={handleClose} variant=\"contained\" color=\"secondary\" className={classes.button}>\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React, {useState, useEffect} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport './DashBoard.css';\n// Material UI Core\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, rgbToHex } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\n// Material Icons\nimport LinkIcon from '@material-ui/icons/Link';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\n\n// Components\nimport AddBoardDialog from './AddBoardDialog.js';\nimport ConfirmDialog from '../../dialogs/ConfirmDialog';\n\n// Service\nimport authHeader from '../../services/auth-header.js';\nimport AuthService from '../../services/auth.service';\nimport constant from '../../Utils';\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  addIcon: {\n    width: '25%',\n    height: '25%',\n    color: '#8e24aa',\n    margin: '0'\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n    maxWidth: '1400px'\n  },\n  addCard: {\n    height: '80%',\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'center',\n    border: '2px dashed #ccc',\n    boxShadow: 'none',\n    backgroundColor: 'transparent',\n    cursor: 'pointer',\n    '&:hover': {\n      border: '2px dashed #8e24aa',\n    }\n  },\n  card: {\n    cursor: 'pointer',\n    '&:hover': {\n      boxShadow: '0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12)'\n    }\n  },\n  cardContent: {\n    flexGrow: 1,\n    margin: '3px'\n  },\n  action: {\n    justifyContent: 'center',\n  },\n  actionBtn: {\n    width: '100%'\n  },\n  actionIcons: {\n    fontSize: '15px',\n    marginRight: '5px',\n    verticalAlign: 'top'\n  },\n  info: {\n    color: '#888888',\n    fontSize: '13px',\n    position: 'relative',\n    '& div.info-time': {\n      position: 'absolute',\n      left: '7px'\n    },\n    '& div.info-numOfCard': {\n      position: 'absolute',\n      right: '7px'\n    }\n  }\n}));\n\nconst monthStrs = ['January', 'February', 'March', 'April', 'May', 'June', 'July', \"August\", 'September', 'October', 'November', 'December'];\n\nfunction DashBoard(props) {\n  const history = useHistory();\n  if (!AuthService.getCurrentUser()){\n      history.push('/logIn');\n  }\n\n  const classes = useStyles();\n  const user = AuthService.getCurrentUser();\n  const [boards, setBoards] = useState([]);\n  const [openAdd, setOpenAdd] = useState(false);\n  const [openDel, setOpenDel] = useState(false);\n  const [delBoard, setDelBoard] = useState(null);\n\n  useEffect(() => {\n    props.setIsLoading(true);\n    const requestOptions = {\n      method: 'GET',\n      headers: authHeader(),\n    };\n    fetch(constant.api + constant.allBoardPath + constant.myBoardPath, requestOptions)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          result.forEach((board, index) => {\n            board.createdDate = new Date(board.createdDate);\n          })\n          setBoards(result);\n          props.setIsLoading(false);\n        },\n        (error) => {\n          props.setIsLoading(false);\n        }\n    )\n  }, [])\n\n  const addBoard = (board) => {\n    board.createdDate = new Date(board.createdDate);\n    const newBoards = boards.slice();\n    newBoards.push(board);\n    setBoards(newBoards);\n  }\n\n  const handleDeleteBoard = (boardID) => {\n    const user = AuthService.getCurrentUser();\n    if (!boardID || !user){\n        return;\n    }\n    props.setIsLoading(true);\n    const requestOptions = {\n        method: 'POST',\n        headers: Object.assign({\n            'Content-Type': 'application/json'   \n        }, authHeader()),\n        body: JSON.stringify({ \n            boardID: boardID\n        })\n    };\n    return fetch(constant.api + constant.allBoardPath + constant.deleteBoard, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n            if (result.isSuccess){\n                const newBoards2 = boards.filter((board, idx) => board.boardID !== boardID);\n                setBoards(newBoards2);\n            }\n            props.setIsLoading(false);\n    }, (error) => {\n        if (error) {\n          props.setIsLoading(false);\n        }\n      })\n  }\n\n  const openDeleteDialog = (board) => {\n    setDelBoard(board);\n    setOpenDel(true);\n  }\n\n  const toBoard = (boardID) => {\n    history.push(constant.boardPath + '/' + boardID);\n  }\n\n  const copyUrlToClipboard = (boardID) => {\n    navigator.clipboard.writeText(window.location.origin + constant.boardPath + `/${AuthService.getCurrentUser().userID}/${boardID}`)\n    alert('Copied URL');\n  }\n  return (\n    <main>\n      <Container className={classes.cardGrid} maxWidth=\"md\">\n        <AddBoardDialog open={openAdd} setOpen={setOpenAdd} addBoard={addBoard} setIsLoading={props.setIsLoading}/>\n        <ConfirmDialog open={openDel} setOpen={setOpenDel} action={() => handleDeleteBoard(delBoard.boardID)}>Confirm to delete board <b>{(delBoard)? delBoard.name : ''}</b></ConfirmDialog>\n        <Typography gutterBottom variant=\"h4\" component=\"h2\" className=\"title-blue\" style={{fontWeight: '500'}}>\n          My Boards\n        </Typography>            \n        <Grid container spacing={4}>\n          <Grid item xs={8} sm={4} md={3} onClick={() => setOpenAdd(true)}>\n              <Card className={classes.addCard}>\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                    <AddCircleIcon className={classes.addIcon}/>\n                  </Typography>\n                  <Typography gutterBottom variant=\"h6\" component=\"h2\" className=\"title-blue\">\n                    Add\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          {boards.map((board) => (\n            <Grid item key={board.boardID} xs={8} sm={4} md={3}>\n              <Card className={classes.card}>\n                <CardContent className={classes.cardContent} onClick={() => toBoard(board.boardID)}>\n                  <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                    {board.name}\n                  </Typography>\n                  <div className={classes.info}>\n                    <div className=\"info-time\">\n                        <span><ScheduleIcon className={classes.actionIcons}/>\n                        </span>\n                        {board.createdDate.getDate()}  &nbsp;\n                          {monthStrs[board.createdDate.getMonth()]}\n                    </div>\n                    <div className=\"info-numOfCard\">\n                      <span>{board.numOfCard} Cards</span> \n                    </div>\n                  </div>\n                </CardContent>\n                <CardActions className={classes.action}>\n                  <Button size=\"small\" color=\"primary\" className={classes.actionBtn} onClick={() => copyUrlToClipboard(board.boardID)}>\n                    <LinkIcon className={classes.actionIcons}/>\n                    URL\n                  </Button>\n                  <Button size=\"small\" color=\"primary\" className={classes.actionBtn} onClick={(evt) => openDeleteDialog(board)}>\n                    <DeleteIcon className={classes.actionIcons}/>\n                    DELETE\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    </main>\n  );\n}\n\nexport default DashBoard;\n","import React, {useState} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n// Components\r\nimport Footer from '../../layouts/Footer';\r\n\r\n// Constant && Services\r\nimport AuthService from '../../services/auth.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  formMessage: {\r\n      textAlign: 'center',\r\n      fontSize: '1.1em'\r\n  }\r\n}));\r\n\r\nexport default function LogIn(props) {\r\n  const history = useHistory();\r\n  if (AuthService.getCurrentUser()){\r\n      history.push('/dashboard');\r\n  }\r\n  const classes = useStyles();\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [errorMsg, setErrMsg] = useState('');\r\n\r\n  function handleLogIn(event){\r\n    event.preventDefault()\r\n    if (!username || !password){\r\n        return;\r\n    }\r\n    props.setIsLoading(true);\r\n    const fetch = AuthService.logIn(username, password).then(result => {\r\n        if (result.isSuccess){\r\n            history.push('/dashboard');\r\n        } else {\r\n          setPassword(\"\");\r\n            // Error message\r\n            setErrMsg(result.message);\r\n        }\r\n        props.setIsLoading(false);\r\n    }, (error) => {\r\n      if (error) {\r\n        props.setIsLoading(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleUsernameChange(evt){\r\n    setUsername(evt.target.value);\r\n  }\r\n\r\n  function handlePasswordChange(evt){\r\n    setPassword(evt.target.value);\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={(evt) => handleLogIn(evt)}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"username\"\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            autoComplete=\"username\"\r\n            autoFocus\r\n            value={username}\r\n            error={username === \"\"}\r\n            helperText={username === \"\" ? 'Enter Username' : ' '}\r\n            onChange={(evt) => handleUsernameChange(evt)}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            value={password}\r\n            error={password === \"\"}\r\n            helperText={password === \"\" ? 'Enter password' : ' '}\r\n            onChange={(evt) => handlePasswordChange(evt)}\r\n          />\r\n          <FormHelperText className={classes.formMessage} error={true}>\r\n              {errorMsg}\r\n          </FormHelperText>\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Remember me\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign In\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Link href=\"#\" variant=\"body2\">\r\n                Forgot password?\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link href=\"/signUp\" variant=\"body2\">\r\n                {\"Don't have an account? Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import React, {useState} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n// Components\r\nimport Footer from '../../layouts/Footer';\r\n\r\n// Constant && Services\r\nimport AuthService from '../../services/auth.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.error.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(1, 0, 1),\r\n  },\r\n  formMessageSuccess: {\r\n    textAlign: 'center',\r\n    fontSize: '1.1em',\r\n    color: '#4BB543'\r\n  },\r\n  formMessageFail: {\r\n    textAlign: 'center',\r\n    fontSize: '1.1em',\r\n    color: '#ff1500'\r\n  },\r\n}));\r\n\r\nexport default function SignUp(props) {\r\n  const history = useHistory();\r\n  if (AuthService.getCurrentUser()){\r\n      history.push('/dashboard');\r\n  }\r\n  const classes = useStyles();\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [repassword, setRePassword] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [isSuccess, setIsSuccess] = useState(true);\r\n  const [errorMsg, setErrMsg] = useState('');\r\n\r\n  function handleUsernameChange(evt){\r\n    setUsername(evt.target.value);\r\n  }\r\n\r\n  function handlePasswordChange(evt){\r\n    setPassword(evt.target.value);\r\n  }\r\n\r\n  function handleRePasswordChange(evt){\r\n    setRePassword(evt.target.value);\r\n  }\r\n\r\n  function handleNameChange(evt){\r\n    setName(evt.target.value);\r\n  }\r\n\r\n  function handleEmailChange(evt){\r\n    setEmail(evt.target.value);\r\n  }\r\n\r\n  function handleSignUp(event){\r\n    event.preventDefault()\r\n    if (!username || !password || !repassword || (password != repassword) || !name || !email){\r\n        return;\r\n    }\r\n    props.setIsLoading(true);\r\n    const fetch = AuthService.signUp(username, password, name, email).then(result => {\r\n        setIsSuccess(result.isSuccess);\r\n        setErrMsg(result.message);\r\n        props.setIsLoading(false);\r\n    }, (error) => {\r\n      if (error) {\r\n        props.setIsLoading(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <CreateIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={(evt) => handleSignUp(evt)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"username\"\r\n                name=\"username\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"username\"\r\n                label=\"Username\"\r\n                autoFocus\r\n                error={username === \"\"}\r\n                helperText={username === \"\" ? 'Enter Username' : ' '}\r\n                onChange={(evt) => handleUsernameChange(evt)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                error={(password === \"\" || repassword === \"\" || password !== repassword)}\r\n                helperText={(password === \"\" || repassword === \"\" || password !== repassword)? 'Confirm Password incorrect' : ' '}\r\n                onChange={(evt) => handlePasswordChange(evt)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"re-password\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                id=\"re-password\"\r\n                autoComplete=\"re-password\"\r\n                error={(password === \"\" || repassword === \"\" || password !== repassword)}\r\n                helperText={(password === \"\" || repassword === \"\" || password !== repassword)? 'Confirm Password incorrect' : ' '}\r\n                onChange={(evt) => handleRePasswordChange(evt)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"fullName\"\r\n                name=\"fullName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"fullName\"\r\n                label=\"Full name\"\r\n                error={name === \"\"}\r\n                helperText={name === \"\" ? 'Enter Name' : ' '}\r\n                onChange={(evt) => handleNameChange(evt)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"email\"\r\n                name=\"email\"\r\n                variant=\"outlined\"\r\n                required\r\n                type=\"email\"\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email\"\r\n                error={email === \"\"}\r\n                helperText={email === \"\" ? 'Enter Email' : ' '}\r\n                onChange={(evt) => handleEmailChange(evt)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <FormHelperText className={(isSuccess)? classes.formMessageSuccess : classes.formMessageFail} error={!isSuccess}>\r\n              {errorMsg}\r\n          </FormHelperText>\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link href=\"/logIn\" variant=\"body2\">\r\n                Already have an account? Sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import React, {useState, useRef} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\n// Material Icons\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\n\r\n// Components\r\nimport Footer from '../../layouts/Footer';\r\n\r\n// Constant && Services\r\nimport authHeader from '../../services/auth-header.js';\r\nimport AuthService from '../../services/auth.service';\r\nimport constant from '../../Utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(3),\r\n    color: '#ffffff',\r\n    backgroundColor: theme.palette.secondary.main,\r\n    fontSize: '60px',\r\n    padding: '5px'\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(1, 0, 1),\r\n  },\r\n  formMessageSuccess: {\r\n    textAlign: 'center',\r\n    fontSize: '1.1em',\r\n    color: '#4BB543'\r\n  },\r\n  formMessageFail: {\r\n    textAlign: 'center',\r\n    fontSize: '1.1em',\r\n    color: '#ff1500'\r\n  },\r\n  formControl: {\r\n      color: '#555555 !important'\r\n  },\r\n  updateIcon: {\r\n      marginLeft: '10px',\r\n      verticalAlign: 'middle',\r\n      cursor: 'pointer'\r\n  }\r\n}));\r\n\r\nexport default function SignUp(props) {\r\n  const history = useHistory();\r\n  const user = AuthService.getCurrentUser();\r\n  if (!user){\r\n      history.push('/logIn');\r\n  }\r\n  const classes = useStyles();\r\n  const [disabled, setDisabled] = useState(true);\r\n  const nameRef = useRef();\r\n  const [name, setName] = useState(user.name);\r\n  const [email, setEmail] = useState(user.email);\r\n  const [gender, setGender] = useState(user.gender);\r\n  const [isSuccess, setIsSuccess] = useState(true);\r\n  const [errorMsg, setErrMsg] = useState('');\r\n\r\n  const toggleUpdate = (evt) => {\r\n      setDisabled(!disabled);\r\n      const timeout = setTimeout(() => {\r\n        nameRef.current.focus();\r\n      }, 100);\r\n  }\r\n\r\n  const handleNameChange = (evt) => {\r\n    setName(evt.target.value);\r\n  }\r\n\r\n  const handleEmailChange = (evt) => {\r\n    setEmail(evt.target.value);\r\n  }\r\n\r\n  const handleGenderChange = (evt) => {\r\n    setGender(evt.target.value);\r\n  }\r\n\r\n  const handleUpdate = (event) => {\r\n    event.preventDefault()\r\n    if (!name || !email || !gender){\r\n        return;\r\n    }\r\n    props.setIsLoading(true);\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: Object.assign({\r\n            'Content-Type': 'application/json'   \r\n        }, authHeader()),\r\n        body: JSON.stringify({ \r\n            name: name,\r\n            email: email,\r\n            gender: gender\r\n        })\r\n    };\r\n    return fetch(constant.api + constant.userPath + constant.updateProfilePath, requestOptions)\r\n        .then(response => response.json())\r\n        .then(result => {\r\n            if (result.isSuccess){\r\n                AuthService.updateCurrentUser({\r\n                    name: name,\r\n                    email: email,\r\n                    gender: gender\r\n                })\r\n            }\r\n            setIsSuccess(result.isSuccess);\r\n            setErrMsg(result.message);\r\n            props.setIsLoading(false);\r\n    }, (error) => {\r\n        if (error) {\r\n          props.setIsLoading(false);\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <AccountBoxIcon className={classes.avatar}>\r\n        </AccountBoxIcon>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Your Profile \r\n          <BorderColorIcon className={classes.updateIcon} onClick={(evt) => toggleUpdate(evt)}/>\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={(evt) => handleUpdate(evt)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"fullName\"\r\n                name=\"fullName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"fullName\"\r\n                label=\"Full name\"\r\n                autoFocus\r\n                inputRef={nameRef}\r\n                InputProps={{\r\n                    className: classes.formControl\r\n                }}\r\n                disabled={disabled}\r\n                value={name}\r\n                error={name === \"\"}\r\n                helperText={name === \"\" ? 'Enter Name' : ' '}\r\n                onChange={(evt) => handleNameChange(evt)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"email\"\r\n                name=\"email\"\r\n                variant=\"outlined\"\r\n                required\r\n                type=\"email\"\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email\"\r\n                InputProps={{\r\n                    className: classes.formControl\r\n                }}\r\n                disabled={disabled}\r\n                value={email}\r\n                error={email === \"\"}\r\n                helperText={email === \"\" ? 'Enter Email' : ' '}\r\n                onChange={(evt) => handleEmailChange(evt)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n            <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Gender</FormLabel>\r\n                <RadioGroup row aria-label=\"gender\" name=\"gender1\" value={gender} onChange={handleGenderChange}>\r\n                    <FormControlLabel disabled={disabled} value=\"Male\" control={<Radio />} label=\"Male\" />\r\n                    <FormControlLabel disabled={disabled} value=\"Female\" control={<Radio />} label=\"Female\" />\r\n                </RadioGroup>\r\n            </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <br/>\r\n          <FormHelperText className={(isSuccess)? classes.formMessageSuccess : classes.formMessageFail} error={!isSuccess}>\r\n              {errorMsg}\r\n          </FormHelperText>\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={disabled}\r\n            className={classes.submit}\r\n          >\r\n            Update\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link href=\"/dashBoard\" variant=\"body2\">\r\n                {\"Back to Dashboard\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport './Board.css';\r\n// Material UI Core\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, rgbToHex } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n// Material Icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\n\r\n// Components\r\nimport ConfirmDialog from '../../dialogs/ConfirmDialog';\r\n\r\n// Service\r\nimport authHeader from '../../services/auth-header.js';\r\nimport AuthService from '../../services/auth.service';\r\nimport constant from '../../Utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    icon: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    addBox: {\r\n        backgroundColor: '#dddddd',\r\n        cursor: 'pointer'\r\n    },\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n        maxWidth: '1500px',\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(2),\r\n    },\r\n    card: {\r\n        position: 'relative'\r\n    },\r\n    deleteCardIcon: {\r\n        position: 'absolute',\r\n        top: '10%',\r\n        right: '5px',\r\n        cursor: 'pointer'\r\n    },\r\n    updateCardIcon: {\r\n        position: 'absolute',\r\n        top: '10%',\r\n        right: '30px',\r\n        cursor: 'pointer'\r\n    },\r\n    updateIcon: {\r\n        marginLeft: '10px',\r\n        verticalAlign: 'middle',\r\n        cursor: 'pointer'\r\n    },\r\n    saveIcon: {\r\n        backgroundColor: '#4BB543',\r\n        marginLeft: '15px',\r\n        fontSize: '0.35em'\r\n    },\r\n    formMessageSuccess: {\r\n        color: '#4BB543'\r\n    },\r\n    formMessageFail: {\r\n        color: '#ff1500'\r\n    },\r\n    addCard: {\r\n        padding: '10px'\r\n    },\r\n    addCardTextField: {\r\n        minHeight: '50px'\r\n    },\r\n    saveCardIcon: {\r\n        backgroundColor: '#4BB543',\r\n        fontSize: '0.8em'\r\n    },\r\n}));\r\n\r\n\r\nfunction Board(props) {\r\n  const history = useHistory();\r\n  if (!AuthService.getCurrentUser()){\r\n      history.push('/logIn');\r\n  } \r\n  const { id } = useParams(); \r\n  const classes = useStyles();\r\n  const [board, setBoard] = useState({columns: []});\r\n  // Board\r\n  const [newBoardName, setNewBoardName] = useState(board.name);\r\n  const [isSuccess, setIsSuccess] = useState(true);\r\n  const [errorMsg, setErrMsg] = useState('');\r\n  const [isEditingBName, setIsEditingBName] = useState(false);\r\n\r\n  // Card\r\n  const [openDel, setOpenDel] = useState(false);\r\n  const [delCard, setDelCard] = useState(null);\r\n\r\n  // Add Card\r\n  const [colAddCards, setColAddCards] = useState({});\r\n\r\n  // Update Cảd\r\n  const [colUpdateCards, setColUpdateCards] = useState({});\r\n\r\n  useEffect(() => {\r\n    props.setIsLoading(true);\r\n    const requestOptions = {\r\n      method: 'GET',\r\n      headers: authHeader(),\r\n    };\r\n    fetch(constant.api + constant.allBoardPath + constant.boardPath + \"?\" + constant.queryParams({\r\n        boardID: id\r\n    }), requestOptions)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n            if (result.isSuccess){\r\n                setBoard(result.board);\r\n                setNewBoardName(result.board.name);\r\n                // Add & Update Card\r\n                const colObjs = {};\r\n                const colObjs2 = {};\r\n                result.board.columns.forEach((col, index) => {\r\n                    colObjs[col.columnID] = [];\r\n                    colObjs2[col.columnID] = {};\r\n                })\r\n                setColAddCards(colObjs);\r\n                setColUpdateCards(colObjs2);\r\n            }\r\n            props.setIsLoading(false);\r\n        },\r\n        (error) => {\r\n            props.setIsLoading(false);\r\n        }\r\n    )\r\n  }, [])\r\n\r\n  const handleNewBoardNameChange = (evt) => {\r\n    setNewBoardName(evt.target.value);\r\n  }\r\n\r\n  const handleUpdateBoardName = () => {\r\n    const user = AuthService.getCurrentUser();\r\n    if (!newBoardName || !user || !board){\r\n        return;\r\n    }\r\n    props.setIsLoading(true);\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: Object.assign({\r\n            'Content-Type': 'application/json'   \r\n        }, authHeader()),\r\n        body: JSON.stringify({ \r\n            boardID: board.boardID,\r\n            name: newBoardName\r\n        })\r\n    };\r\n    return fetch(constant.api + constant.allBoardPath + constant.updateBoardName, requestOptions)\r\n        .then(response => response.json())\r\n        .then(result => {\r\n            setIsSuccess(result.isSuccess);\r\n            setErrMsg(result.message);\r\n            if (result.isSuccess){\r\n                setErrMsg(\"\");\r\n                toggleEnableEditing();\r\n                // Update board\r\n                const newBoard = Object.assign({}, board);\r\n                newBoard.name = newBoardName;\r\n                setBoard(newBoard);\r\n            }\r\n            props.setIsLoading(false);\r\n    }, (error) => {\r\n        if (error) {\r\n          props.setIsLoading(false);\r\n        }\r\n      })\r\n  }\r\n\r\n  const toggleEnableEditing = (evt) => {\r\n      setIsEditingBName(!isEditingBName);\r\n  }\r\n\r\n  const handleDeleteCard = (deleteCard) => {\r\n    const user = AuthService.getCurrentUser();\r\n    if (!deleteCard || !user){\r\n        return;\r\n    }\r\n    props.setIsLoading(true);\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: Object.assign({\r\n            'Content-Type': 'application/json'   \r\n        }, authHeader()),\r\n        body: JSON.stringify({ \r\n            cardID: deleteCard.cardID\r\n        })\r\n    };\r\n    return fetch(constant.api + constant.cardPath + constant.deleteCard, requestOptions)\r\n        .then(response => response.json())\r\n        .then(result => {\r\n            if (result.isSuccess){\r\n                const newBoard = Object.assign({}, board);\r\n                newBoard.columns = newBoard.columns.map((col, index) => {\r\n                    if (col.columnID === deleteCard.columnID){\r\n                        col.numOfCard--;\r\n                        col.cards = col.cards.filter((card, index2) => card.cardID != deleteCard.cardID);\r\n                    }\r\n                    return col;\r\n                })\r\n                setBoard(newBoard);\r\n            }\r\n            props.setIsLoading(false);\r\n    }, (error) => {\r\n        if (error) {\r\n          props.setIsLoading(false);\r\n        }\r\n      })\r\n  }\r\n\r\n  const openDeleteDialog = (card) => {\r\n    setDelCard(card);\r\n    setOpenDel(true);\r\n  }\r\n\r\n  const handleColAddCard = (colID) => {\r\n    const colObjs = Object.assign({}, colAddCards);\r\n    colObjs[colID].push(\"\");\r\n    setColAddCards(colObjs);\r\n  }\r\n\r\n  const handleAddNewCard = (colID, index) => {\r\n      const content = colAddCards[colID][index];\r\n      if (content){\r\n        const user = AuthService.getCurrentUser();\r\n        if (!user){\r\n            return;\r\n        }\r\n        props.setIsLoading(true);\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: Object.assign({\r\n                'Content-Type': 'application/json'   \r\n            }, authHeader()),\r\n            body: JSON.stringify({ \r\n                columnID: colID,\r\n                content: content\r\n            })\r\n        };\r\n        return fetch(constant.api + constant.cardPath + constant.addBoard, requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                if (result.isSuccess){\r\n                    // Update cards in board\r\n                    const newBoard = Object.assign(board);\r\n                    newBoard.columns.forEach((col) => {\r\n                        if (col.columnID == colID){\r\n                            col.cards.push(result.card);\r\n                        }\r\n                    })\r\n                    setBoard(newBoard);\r\n                    const colObjs = Object.assign({}, colAddCards);\r\n                    colObjs[colID].splice(index, 1);\r\n                    setColAddCards(colObjs);\r\n                }\r\n                props.setIsLoading(false);\r\n        }, (error) => {\r\n            if (error) {\r\n              props.setIsLoading(false);\r\n            }\r\n        })\r\n      } else {\r\n        const colObjs = Object.assign({}, colAddCards);\r\n        colObjs[colID].splice(index, 1);\r\n        setColAddCards(colObjs);\r\n      }\r\n  }\r\n\r\n  const handleAddNewCardChange = (evt, colID, index) => {\r\n        const colObjs = Object.assign({}, colAddCards);\r\n        colObjs[colID][index] = evt.target.value;\r\n        setColAddCards(colObjs);\r\n  }\r\n\r\n  // Update Card\r\n  const handleColUpdateCard = (colID, cardID, oldContent) => {\r\n    const colObjs = Object.assign({}, colUpdateCards);\r\n    colObjs[colID][cardID] = oldContent;\r\n    setColUpdateCards(colObjs);\r\n  }\r\n\r\n  const handleUpdateCardChange = (evt, colID, cardID) => {\r\n    const colObjs = Object.assign({}, colUpdateCards);\r\n    colObjs[colID][cardID] = evt.target.value;\r\n    setColUpdateCards(colObjs);\r\n    }\r\n\r\n  const handleUpdateCard = (colID, cardID) => {\r\n    const content = colUpdateCards[colID][cardID];\r\n    if (content){\r\n        const user = AuthService.getCurrentUser();\r\n        if (!user){\r\n            return;\r\n        }\r\n        props.setIsLoading(true);\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: Object.assign({\r\n                'Content-Type': 'application/json'   \r\n            }, authHeader()),\r\n            body: JSON.stringify({ \r\n                cardID: cardID,\r\n                content: content\r\n            })\r\n        };\r\n        return fetch(constant.api + constant.cardPath + constant.updateCard, requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                if (result.isSuccess){\r\n                    // Update cards in board\r\n                    const newBoard = Object.assign(board);\r\n                    newBoard.columns.forEach((col) => {\r\n                        if (col.columnID == colID){\r\n                            col.cards.forEach((card) => {\r\n                                if (card.cardID == cardID){\r\n                                    card.content = content;\r\n                                    return;\r\n                                }\r\n                            })\r\n                            return;\r\n                        }\r\n                    })\r\n                    setBoard(newBoard);\r\n                    const colObjs = Object.assign({}, colUpdateCards);\r\n                    colObjs[colID][cardID] = \"\"\r\n                    setColUpdateCards(colObjs);\r\n                }\r\n                props.setIsLoading(false);\r\n        }, (error) => {\r\n            if (error) {\r\n              props.setIsLoading(false);\r\n            }\r\n        })\r\n    } else {\r\n      const colObjs = Object.assign({}, colUpdateCards);\r\n      colObjs[colID][cardID] = \"\";\r\n      setColUpdateCards(colObjs);\r\n    }\r\n\r\n }\r\n\r\n  const bgcolor = [\"primary.main\", \"secondary.main\", \"error.main\"];\r\n  const color = [\"primary.contrastText\", \"secondary.contrastText\", \"error.contrastText\"];\r\n  const boardNameUI = [];\r\n\r\n  if (isEditingBName){\r\n      boardNameUI.push(<React.Fragment>\r\n          <TextField\r\n                name=\"name\"\r\n                required\r\n                id=\"name\"\r\n                autoFocus\r\n                value={newBoardName}\r\n                error={newBoardName === \"\"}\r\n                onChange={(evt) => handleNewBoardNameChange(evt)}\r\n              />\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                className={classes.saveIcon}\r\n                startIcon={<SaveIcon />}\r\n                onClick={(evt) => handleUpdateBoardName(evt)}\r\n                >\r\n                Save\r\n            </Button>\r\n          <FormHelperText className={(isSuccess)? classes.formMessageSuccess : classes.formMessageFail} error={!isSuccess}>\r\n              {errorMsg}\r\n          </FormHelperText>\r\n      </React.Fragment>);\r\n    }   else {\r\n        boardNameUI.push(board.name);\r\n        boardNameUI.push(<BorderColorIcon className={classes.updateIcon} onClick={toggleEnableEditing}/>)\r\n    }\r\n  return (\r\n    <main>\r\n      <Container className={classes.cardGrid} maxWidth=\"md\">\r\n      <ConfirmDialog open={openDel} setOpen={setOpenDel} action={() => handleDeleteCard(delCard)}>Confirm to delete card <b>{(delCard)? delCard.content : ''}</b></ConfirmDialog>\r\n        <Typography gutterBottom variant=\"h4\" component=\"h2\" className=\"title-blue\" style={{fontWeight: '500'}}>\r\n            {boardNameUI}\r\n        </Typography>            \r\n        <Grid container spacing={4}>\r\n        {board.columns.map((col, index) => {\r\n                return (\r\n                    <Grid item xs={12} sm={4} md={4}>\r\n                        <Box bgcolor={bgcolor[index % board.numOfCol]} color={color[index % board.numOfCol]} p={0} align=\"center\">\r\n                            <Typography variant=\"h6\">{col.columnName}</Typography>\r\n                        </Box>\r\n                        <Box p={0} align=\"center\" className={classes.addBox} onClick={() => handleColAddCard(col.columnID)}>\r\n                            <AddIcon/>\r\n                        </Box>\r\n                        {\r\n                            (colAddCards[col.columnID])?\r\n                            colAddCards[col.columnID].map((newCard, index2) => {\r\n                                return (\r\n                                    <Box p={3} align=\"left\" className={classes.addBox}\r\n                                        border={5}\r\n                                        borderColor={bgcolor[index % board.numOfCol]}\r\n                                        marginTop={2}\r\n                                        className={classes.addCard}>\r\n                                        <TextField\r\n                                            multiline=\"true\"\r\n                                            rowsMax=\"10\"\r\n                                            name=\"content\"\r\n                                            required\r\n                                            fullWidth\r\n                                            id=\"content\"\r\n                                            autoFocus\r\n                                            InputProps={{ disableUnderline: true }}\r\n                                            className={classes.addCardTextField}\r\n                                            value={colAddCards[col.columnID][index2]}\r\n                                            onChange={(evt) => handleAddNewCardChange(evt, col.columnID, index2)}\r\n                                        />\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            size=\"small\"\r\n                                            className={classes.saveCardIcon}\r\n                                            onClick={(evt) => handleAddNewCard(col.columnID, index2)}\r\n                                            >\r\n                                                ADD\r\n                                        </Button>\r\n                                    </Box>\r\n                                )\r\n                            })\r\n                            :\r\n                            ''\r\n                        }\r\n                        {col.cards.map((card, index2) => {\r\n                            return (colUpdateCards[col.columnID] &&colUpdateCards[col.columnID][card.cardID])? \r\n                            (\r\n                                <Box p={3} align=\"left\" className={classes.addBox}\r\n                                    border={5}\r\n                                    borderColor={bgcolor[index % board.numOfCol]}\r\n                                    marginTop={2}\r\n                                    className={classes.addCard}>\r\n                                    <TextField\r\n                                        multiline=\"true\"\r\n                                        rowsMax=\"10\"\r\n                                        name=\"content\"\r\n                                        required\r\n                                        fullWidth\r\n                                        id=\"content\"\r\n                                        \r\n                                        InputProps={{ disableUnderline: true }}\r\n                                        className={classes.addCardTextField}\r\n                                        value={colUpdateCards[col.columnID][card.cardID]}\r\n                                        onChange={(evt) => handleUpdateCardChange(evt, col.columnID, card.cardID)}\r\n                                    />\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        className={classes.saveCardIcon}\r\n                                        onClick={(evt) => handleUpdateCard(col.columnID, card.cardID)}\r\n                                        >\r\n                                            DONE\r\n                                    </Button>\r\n                                </Box>\r\n                            ) :\r\n                            (\r\n                                <Box p={3} align=\"left\" bgcolor={bgcolor[index % board.numOfCol]} color={color[index % board.numOfCol]} \r\n                                    border={3}\r\n                                    borderColor=\"#888888\"\r\n                                    marginTop={2}\r\n                                    className={classes.card}\r\n                                    >\r\n                                    <Typography>{card.content}</Typography>\r\n                                    <CreateIcon className={classes.updateCardIcon} onClick={(evt) => handleColUpdateCard(col.columnID, card.cardID, card.content)}/>\r\n                                    <DeleteOutlineIcon className={classes.deleteCardIcon} onClick={(evt) => openDeleteDialog(card)}/>\r\n                                </Box>\r\n                            )\r\n                        })}\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n      </Container>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React, {useState, useEffect} from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport './ShareBoard.css';\r\n// Material UI Core\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, rgbToHex } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n// Material Icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\n\r\n// Components\r\nimport ConfirmDialog from '../../dialogs/ConfirmDialog';\r\n\r\n// Service\r\nimport authHeader from '../../services/auth-header.js';\r\nimport AuthService from '../../services/auth.service';\r\nimport constant from '../../Utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    icon: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    addBox: {\r\n        backgroundColor: '#dddddd',\r\n        cursor: 'pointer'\r\n    },\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n        maxWidth: '1500px',\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(2),\r\n    },\r\n    card: {\r\n        position: 'relative'\r\n    },\r\n    deleteCardIcon: {\r\n        position: 'absolute',\r\n        top: '10%',\r\n        right: '5px',\r\n        cursor: 'pointer'\r\n    },\r\n    updateCardIcon: {\r\n        position: 'absolute',\r\n        top: '10%',\r\n        right: '30px',\r\n        cursor: 'pointer'\r\n    },\r\n    updateIcon: {\r\n        marginLeft: '10px',\r\n        verticalAlign: 'middle',\r\n        cursor: 'pointer'\r\n    },\r\n    saveIcon: {\r\n        backgroundColor: '#4BB543',\r\n        marginLeft: '15px',\r\n        fontSize: '0.35em'\r\n    },\r\n    formMessageSuccess: {\r\n        color: '#4BB543'\r\n    },\r\n    formMessageFail: {\r\n        color: '#ff1500'\r\n    },\r\n    addCard: {\r\n        padding: '10px'\r\n    },\r\n    addCardTextField: {\r\n        minHeight: '50px'\r\n    },\r\n    saveCardIcon: {\r\n        backgroundColor: '#4BB543',\r\n        fontSize: '0.8em'\r\n    },\r\n}));\r\n\r\n\r\nfunction ShareBoard(props) {\r\n  const history = useHistory();\r\n  if (!AuthService.getCurrentUser()){\r\n      history.push('/logIn');\r\n  } \r\n  const { userID, boardID } = useParams(); \r\n  const classes = useStyles();\r\n  const [board, setBoard] = useState({columns: []});\r\n  // Board\r\n  const [newBoardName, setNewBoardName] = useState(board.name);\r\n  const [isSuccess, setIsSuccess] = useState(true);\r\n  const [errorMsg, setErrMsg] = useState('');\r\n  const [isEditingBName, setIsEditingBName] = useState(false);\r\n\r\n  // Card\r\n  const [openDel, setOpenDel] = useState(false);\r\n  const [delCard, setDelCard] = useState(null);\r\n\r\n  // Add Card\r\n  const [colAddCards, setColAddCards] = useState({});\r\n\r\n  // Update Card\r\n  const [colUpdateCards, setColUpdateCards] = useState({});\r\n  useEffect(() => {\r\n    props.setIsLoading(true);\r\n    const requestOptions = {\r\n      method: 'GET',\r\n      headers: authHeader(),\r\n    };\r\n    fetch(constant.api + constant.allBoardPath + constant.boardPath + \"?\" + constant.queryParams({\r\n        userID: userID,\r\n        boardID: boardID\r\n    }), requestOptions)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n            if (result.isSuccess){\r\n                setBoard(result.board);\r\n                setNewBoardName(result.board.name);\r\n                // Add & Update Card\r\n                const colObjs = {};\r\n                const colObjs2 = {};\r\n                result.board.columns.forEach((col, index) => {\r\n                    colObjs[col.columnID] = [];\r\n                    colObjs2[col.columnID] = {};\r\n                })\r\n                setColAddCards(colObjs);\r\n                setColUpdateCards(colObjs2);\r\n            }\r\n            props.setIsLoading(false);\r\n        },\r\n        (error) => {\r\n            props.setIsLoading(false);\r\n        }\r\n    )\r\n  }, [])\r\n\r\n  const handleNewBoardNameChange = (evt) => {\r\n    setNewBoardName(evt.target.value);\r\n  }\r\n\r\n  const handleUpdateBoardName = () => {\r\n    const user = AuthService.getCurrentUser();\r\n    if (!newBoardName || !user || !board){\r\n        return;\r\n    }\r\n    props.setIsLoading(true);\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: Object.assign({\r\n            'Content-Type': 'application/json'   \r\n        }, authHeader()),\r\n        body: JSON.stringify({ \r\n            userID: userID,\r\n            boardID: board.boardID,\r\n            name: newBoardName\r\n        })\r\n    };\r\n    return fetch(constant.api + constant.allBoardPath + constant.updateBoardName, requestOptions)\r\n        .then(response => response.json())\r\n        .then(result => {\r\n            setIsSuccess(result.isSuccess);\r\n            setErrMsg(result.message);\r\n            if (result.isSuccess){\r\n                setErrMsg(\"\");\r\n                toggleEnableEditing();\r\n                // Update board\r\n                const newBoard = Object.assign({}, board);\r\n                newBoard.name = newBoardName;\r\n                setBoard(newBoard);\r\n            }\r\n            props.setIsLoading(false);\r\n    }, (error) => {\r\n        if (error) {\r\n          props.setIsLoading(false);\r\n        }\r\n      })\r\n  }\r\n\r\n  const toggleEnableEditing = (evt) => {\r\n      setIsEditingBName(!isEditingBName);\r\n  }\r\n\r\n  const handleDeleteCard = (deleteCard) => {\r\n    const user = AuthService.getCurrentUser();\r\n    if (!deleteCard || !user){\r\n        return;\r\n    }\r\n    props.setIsLoading(true);\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: Object.assign({\r\n            'Content-Type': 'application/json'   \r\n        }, authHeader()),\r\n        body: JSON.stringify({ \r\n            userID: userID,\r\n            cardID: deleteCard.cardID\r\n        })\r\n    };\r\n    return fetch(constant.api + constant.cardPath + constant.deleteCard, requestOptions)\r\n        .then(response => response.json())\r\n        .then(result => {\r\n            if (result.isSuccess){\r\n                const newBoard = Object.assign({}, board);\r\n                newBoard.columns = newBoard.columns.map((col, index) => {\r\n                    if (col.columnID === deleteCard.columnID){\r\n                        col.numOfCard--;\r\n                        col.cards = col.cards.filter((card, index2) => card.cardID != deleteCard.cardID);\r\n                    }\r\n                    return col;\r\n                })\r\n                setBoard(newBoard);\r\n            }\r\n            props.setIsLoading(false);\r\n    }, (error) => {\r\n        if (error) {\r\n          props.setIsLoading(false);\r\n        }\r\n      })\r\n  }\r\n\r\n  const openDeleteDialog = (card) => {\r\n    setDelCard(card);\r\n    setOpenDel(true);\r\n  }\r\n\r\n  const handleColAddCard = (colID) => {\r\n    const colObjs = Object.assign({}, colAddCards);\r\n    colObjs[colID].push(\"\");\r\n    setColAddCards(colObjs);\r\n  }\r\n\r\n  const handleAddNewCard = (colID, index) => {\r\n      const content = colAddCards[colID][index];\r\n      if (content){\r\n        const user = AuthService.getCurrentUser();\r\n        if (!user){\r\n            return;\r\n        }\r\n        props.setIsLoading(true);\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: Object.assign({\r\n                'Content-Type': 'application/json'   \r\n            }, authHeader()),\r\n            body: JSON.stringify({ \r\n                userID: userID,\r\n                columnID: colID,\r\n                content: content\r\n            })\r\n        };\r\n        return fetch(constant.api + constant.cardPath + constant.addBoard, requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                if (result.isSuccess){\r\n                    // Update cards in board\r\n                    const newBoard = Object.assign(board);\r\n                    newBoard.columns.forEach((col) => {\r\n                        if (col.columnID == colID){\r\n                            col.cards.push(result.card);\r\n                        }\r\n                    })\r\n                    setBoard(newBoard);\r\n                    const colObjs = Object.assign({}, colAddCards);\r\n                    colObjs[colID].splice(index, 1);\r\n                    setColAddCards(colObjs);\r\n                }\r\n                props.setIsLoading(false);\r\n        }, (error) => {\r\n            if (error) {\r\n              props.setIsLoading(false);\r\n            }\r\n        })\r\n      } else {\r\n        const colObjs = Object.assign({}, colAddCards);\r\n        colObjs[colID].splice(index, 1);\r\n        setColAddCards(colObjs);\r\n      }\r\n  }\r\n\r\n  const handleAddNewCardChange = (evt, colID, index) => {\r\n        const colObjs = Object.assign({}, colAddCards);\r\n        colObjs[colID][index] = evt.target.value;\r\n        setColAddCards(colObjs);\r\n  }\r\n\r\n  // Update Card\r\n  const handleColUpdateCard = (colID, cardID, oldContent) => {\r\n    const colObjs = Object.assign({}, colUpdateCards);\r\n    colObjs[colID][cardID] = oldContent;\r\n    setColUpdateCards(colObjs);\r\n  }\r\n\r\n  const handleUpdateCardChange = (evt, colID, cardID) => {\r\n    const colObjs = Object.assign({}, colUpdateCards);\r\n    colObjs[colID][cardID] = evt.target.value;\r\n    setColUpdateCards(colObjs);\r\n    }\r\n\r\n  const handleUpdateCard = (colID, cardID) => {\r\n    const content = colUpdateCards[colID][cardID];\r\n    if (content){\r\n        const user = AuthService.getCurrentUser();\r\n        if (!user){\r\n            return;\r\n        }\r\n        props.setIsLoading(true);\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: Object.assign({\r\n                'Content-Type': 'application/json'   \r\n            }, authHeader()),\r\n            body: JSON.stringify({ \r\n                userID: userID,\r\n                cardID: cardID,\r\n                content: content\r\n            })\r\n        };\r\n        return fetch(constant.api + constant.cardPath + constant.updateCard, requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                if (result.isSuccess){\r\n                    // Update cards in board\r\n                    const newBoard = Object.assign(board);\r\n                    newBoard.columns.forEach((col) => {\r\n                        if (col.columnID == colID){\r\n                            col.cards.forEach((card) => {\r\n                                if (card.cardID == cardID){\r\n                                    card.content = content;\r\n                                    return;\r\n                                }\r\n                            })\r\n                            return;\r\n                        }\r\n                    })\r\n                    setBoard(newBoard);\r\n                    const colObjs = Object.assign({}, colUpdateCards);\r\n                    colObjs[colID][cardID] = \"\"\r\n                    setColUpdateCards(colObjs);\r\n                }\r\n                props.setIsLoading(false);\r\n        }, (error) => {\r\n            if (error) {\r\n              props.setIsLoading(false);\r\n            }\r\n        })\r\n    } else {\r\n      const colObjs = Object.assign({}, colUpdateCards);\r\n      colObjs[colID][cardID] = \"\";\r\n      setColUpdateCards(colObjs);\r\n    }\r\n\r\n }\r\n\r\n  const bgcolor = [\"primary.main\", \"secondary.main\", \"error.main\"];\r\n  const color = [\"primary.contrastText\", \"secondary.contrastText\", \"error.contrastText\"];\r\n  const boardNameUI = [];\r\n\r\n  if (isEditingBName){\r\n      boardNameUI.push(<React.Fragment>\r\n          <TextField\r\n                name=\"name\"\r\n                required\r\n                id=\"name\"\r\n                autoFocus\r\n                value={newBoardName}\r\n                error={newBoardName === \"\"}\r\n                onChange={(evt) => handleNewBoardNameChange(evt)}\r\n              />\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                className={classes.saveIcon}\r\n                startIcon={<SaveIcon />}\r\n                onClick={(evt) => handleUpdateBoardName(evt)}\r\n                >\r\n                Save\r\n            </Button>\r\n          <FormHelperText className={(isSuccess)? classes.formMessageSuccess : classes.formMessageFail} error={!isSuccess}>\r\n              {errorMsg}\r\n          </FormHelperText>\r\n      </React.Fragment>);\r\n    }   else {\r\n        boardNameUI.push(board.name);\r\n        boardNameUI.push(<BorderColorIcon className={classes.updateIcon} onClick={toggleEnableEditing}/>)\r\n    }\r\n  return (\r\n    <main>\r\n      <Container className={classes.cardGrid} maxWidth=\"md\">\r\n      <ConfirmDialog open={openDel} setOpen={setOpenDel} action={() => handleDeleteCard(delCard)}>Confirm to delete card <b>{(delCard)? delCard.content : ''}</b></ConfirmDialog>\r\n        <Typography gutterBottom variant=\"h4\" component=\"h2\" className=\"title-blue\" style={{fontWeight: '500'}}>\r\n            {boardNameUI}\r\n        </Typography>            \r\n        <Grid container spacing={4}>\r\n        {board.columns.map((col, index) => {\r\n                return (\r\n                    <Grid item xs={12} sm={4} md={4}>\r\n                        <Box bgcolor={bgcolor[index % board.numOfCol]} color={color[index % board.numOfCol]} p={0} align=\"center\">\r\n                            <Typography variant=\"h6\">{col.columnName}</Typography>\r\n                        </Box>\r\n                        <Box p={0} align=\"center\" className={classes.addBox} onClick={() => handleColAddCard(col.columnID)}>\r\n                            <AddIcon/>\r\n                        </Box>\r\n                        {\r\n                            (colAddCards[col.columnID])?\r\n                            colAddCards[col.columnID].map((newCard, index2) => {\r\n                                return (\r\n                                    <Box p={3} align=\"left\" className={classes.addBox}\r\n                                        border={5}\r\n                                        borderColor={bgcolor[index % board.numOfCol]}\r\n                                        marginTop={2}\r\n                                        className={classes.addCard}>\r\n                                        <TextField\r\n                                            multiline=\"true\"\r\n                                            rowsMax=\"10\"\r\n                                            name=\"content\"\r\n                                            required\r\n                                            fullWidth\r\n                                            id=\"content\"\r\n                                            autoFocus\r\n                                            InputProps={{ disableUnderline: true }}\r\n                                            className={classes.addCardTextField}\r\n                                            value={colAddCards[col.columnID][index2]}\r\n                                            onChange={(evt) => handleAddNewCardChange(evt, col.columnID, index2)}\r\n                                        />\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            size=\"small\"\r\n                                            className={classes.saveCardIcon}\r\n                                            onClick={(evt) => handleAddNewCard(col.columnID, index2)}\r\n                                            >\r\n                                                ADD\r\n                                        </Button>\r\n                                    </Box>\r\n                                )\r\n                            })\r\n                            :\r\n                            ''\r\n                        }\r\n                        {col.cards.map((card, index2) => {\r\n                            return (colUpdateCards[col.columnID] &&colUpdateCards[col.columnID][card.cardID])? \r\n                            (\r\n                                <Box p={3} align=\"left\" className={classes.addBox}\r\n                                    border={5}\r\n                                    borderColor={bgcolor[index % board.numOfCol]}\r\n                                    marginTop={2}\r\n                                    className={classes.addCard}>\r\n                                    <TextField\r\n                                        multiline=\"true\"\r\n                                        rowsMax=\"10\"\r\n                                        name=\"content\"\r\n                                        required\r\n                                        fullWidth\r\n                                        id=\"content\"\r\n                                        \r\n                                        InputProps={{ disableUnderline: true }}\r\n                                        className={classes.addCardTextField}\r\n                                        value={colUpdateCards[col.columnID][card.cardID]}\r\n                                        onChange={(evt) => handleUpdateCardChange(evt, col.columnID, card.cardID)}\r\n                                    />\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        className={classes.saveCardIcon}\r\n                                        onClick={(evt) => handleUpdateCard(col.columnID, card.cardID)}\r\n                                        >\r\n                                            DONE\r\n                                    </Button>\r\n                                </Box>\r\n                            ) :\r\n                            (\r\n                                <Box p={3} align=\"left\" bgcolor={bgcolor[index % board.numOfCol]} color={color[index % board.numOfCol]} \r\n                                    border={3}\r\n                                    borderColor=\"#888888\"\r\n                                    marginTop={2}\r\n                                    className={classes.card}\r\n                                    >\r\n                                    <Typography>{card.content}</Typography>\r\n                                    <CreateIcon className={classes.updateCardIcon} onClick={(evt) => handleColUpdateCard(col.columnID, card.cardID, card.content)}/>\r\n                                    <DeleteOutlineIcon className={classes.deleteCardIcon} onClick={(evt) => openDeleteDialog(card)}/>\r\n                                </Box>\r\n                            )\r\n                        })}\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n      </Container>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ShareBoard;\r\n","import React from \"react\";\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = {\r\n    display: 'block',\r\n    left: '40%',\r\n    top: '30%',\r\n    zIndex: '9999'\r\n};\r\n\r\nexport default function Loading(props){\r\n    return (\r\n        <div className=\"sweet-loading\" style={{'display': (props.loading)? 'block' : 'none'}}>\r\n            <PacmanLoader\r\n                css={override}\r\n                size={100}\r\n                color={\"#555555\"}\r\n                loading={props.loading}\r\n            />\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport './App.css';\n// Material UI Core\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// Components\nimport Header from '../Header';\nimport Footer from '../Footer';\nimport DashBoard from '../../components/DashBoard';\nimport LogIn from '../../components/LogIn';\nimport SignUp from '../../components/SignUp';\nimport Profile from '../../components/Profile';\nimport Board from '../../components/Board';\nimport ShareBoard from '../../components/ShareBoard';\nimport Loading from '../../layouts/Loading';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  \n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Loading loading={isLoading}/>\n      <Router>\n        <Switch>\n          <Route path=\"/logIn\">\n              {/* Header */}\n              <Header/>\n              <LogIn setIsLoading={setIsLoading}/>\n          </Route>\n          <Route path=\"/signUp\">\n              {/* Header */}\n              <Header/>\n              <SignUp setIsLoading={setIsLoading}/>\n          </Route>\n          <Route path=\"/profile\">\n              {/* Header */}\n              <Header/>\n              <Profile setIsLoading={setIsLoading}/>\n          </Route>\n          <Route path=\"/dashboard\">\n            {/* Header */}\n            <Header/>\n            {/* End Header */}\n            <DashBoard setIsLoading={setIsLoading}/>\n            {/* Footer */}\n            <Footer/>\n            {/* End footer */}\n          </Route>\n          <Route path=\"/board/:userID/:boardID\">\n            {/* Header */}\n            <Header/>\n            {/* End Header */}\n            <ShareBoard setIsLoading={setIsLoading}/>\n            {/* Footer */}\n            <Footer/>\n            {/* End footer */}\n          </Route>\n          <Route path=\"/board/:id\">\n            {/* Header */}\n            <Header/>\n            {/* End Header */}\n            <Board setIsLoading={setIsLoading}/>\n            {/* Footer */}\n            <Footer/>\n            {/* End footer */}\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/dashboard\"/>\n          </Route>\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './layouts/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}